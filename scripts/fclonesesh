#!/usr/bin/env bash
# flconesesh - Clone a GitHub repository using fzf and gum, then connect with sesh
set -euo pipefail

# fzf fuzzy search of git repositories, then clone
function fclonesesh() {
    # Make sure your GitHub key is loaded in the agent first
    if ! ssh-add -l 2>/dev/null | grep -q 'fXGkqcOXmtBUEdVBJoKRMl8Z70mSACLYOF8NPQtaRxM'; then
        gum spin --title "Adding GitHub SSH key to agent, enter passphrase 🔒" -- \
            ssh-add ~/.ssh/github_ed25519 || { echo "❌  Could not add SSH key – aborting"; sleep 2; return 1; }
        echo "🎉 Success Added GitHub SSH key to agent!"
    fi

    # Start GitHub API search in background
    temp_fresh_results=$(mktemp)
    # Ensure temp file is removed on exit
    {
        $HOME/scripts/listrepo_gql $GITHUB_SEARCH_OAUTH_TOKEN $GITHUB_ORG > "$temp_fresh_results" 2>/dev/null &
    }
    # Capture background process ID to manage it later
    api_pid=$!

    # Show immediate options (Other + cached repos) without waiting for API
    immediate_options=$(
        (
            echo "Other"
            echo "🔄 Search fresh repos..."
            cat $fzf_git_cache 2>/dev/null
        ) | nauniq
    )

    # Let user select from immediate options
    selection="$(
        echo "$immediate_options" | \
        gum filter --limit 1 --placeholder 'Clone a repo...' --height 50 --prompt='🤖 ' --header="GitHub Repo Clone Tool" --header.foreground 5
    )"

    # If user selected "Search fresh repos", wait for API and show full results
    if [[ "$selection" == "🔄 Search fresh repos..." ]]; then
        # Wait for background API call to complete
        gum spin --title "Searching for GitHub Repos..." -- pid $api_pid

        selection="$( \
            (
              echo "Other";
              cat $fzf_git_cache 2>/dev/null;
              cat "$temp_fresh_results" 2>/dev/null
            ) | \
            tee $fzf_git_cache | \
            nauniq | \
            gum filter --limit 1 --placeholder 'Clone a repo...' --height 50 --prompt='🤖 ' --header="GitHub Repo Clone Tool" --header.foreground 5

        )"
    else
        # Clean up background process if user didn't wait for it
        kill $api_pid 2>/dev/null
    fi

    # Clean up temp file
    rm -f "$temp_fresh_results"

    # If no selection made, exit
    if [[ -z $selection ]]; then
        return
    fi

    # !!!!!!!!!!!

    if [[ -z $selection ]]; then
        return
    fi

    if [[ "$selection" == "Other" ]]; then
        repo="$(gum input --placeholder 'user/repo' --prompt 'Enter GitHub repo (user/repo): ')"
        repo="${repo## }"; repo="${repo%% }"
        if [[ -z "$repo" || "$repo" != */* || "$repo" == *" "* || "$repo" == */ || "$repo" == /* ]]; then
            gum style --foreground 1 "Invalid format. Expected: user/repo (e.g., jalvesaq/nvimcom)."
            return 1
        fi
    else
        repo="$selection"
    fi

    username="${repo%%/*}"  # Extracts the username part before '/'
    repo_dir="$HOME/code/$repo"

    if [ -d "$repo_dir" ]; then
       gum spin --title "Directory $repo_dir already exists. Connecting..." -- \
           sesh connect "$repo_dir"
    else
       mkdir -p "$HOME/code/$username"  # Create directory for the username if it doesn't exist

       # Add gum select to choose between Normal Git Repo and Bare Git Repo
       repo_types=("Bare Git Repo" "Normal Git Repo")
       repo_type=$( \
           printf "%s\n" "${repo_types[@]}" | \
           gum filter --limit 1 --placeholder "Choose a repo type" --height 50
       )

       if [[ $repo_type == "Normal Git Repo" ]]; then
           gum spin --title "Cloning from GitHub into $repo_dir" -- \
               git clone git@github.com:$repo.git "$repo_dir"
       else
           gum spin --title "Cloning from GitHub into $repo_dir" -- \
               git-clone-bare-for-worktrees.sh git@github.com:$repo.git "$repo_dir"
       fi

       sesh connect "$repo_dir"
    fi
}

fclonesesh
