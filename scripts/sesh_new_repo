#!/bin/bash

# fzf fuzzy search of git repositories, then clone
function sesh_new_repo() {

    GITHUB_USERNAME="$(git config user.name)"
    github_users=("$GITHUB_USERNAME" "$GITHUB_ORG")
    github_uers=("${github_users[@],,}")  # Convert array elements to lowercase

    github_user="$( \
        printf "%s\n" "${github_users[@]}" | \
        gum filter --limit 1 --placeholder 'Pick a GitHub username or organization...' --height 50 --prompt='🐈‍⬛'
    )"

    if [[ -n $github_user ]]; then
       github_user_dir="$HOME/code/$github_user"

       repo_dir="$(gum input --placeholder "What's the name of the new repo?" --prompt="📝 ")"

       if [ -d "$github_user_dir/$repo_dir" ]; then
          gum spin --title "Directory $github_user_dir/$repo_dir already exists. Connecting..." -- \
              sesh connect $github_user_dir/$repo_dir
       else
          template=$( \
              (gh repo list anthonyokc --json name,isTemplate --jq '.[] | select(.isTemplate) | .name') | \
              gum filter --limit 1 --placeholder 'Pick a repo template' --height 50 --prompt='📚'
          )
          mkdir -p "$github_user_dir"  # Create directory for the username if it doesn't exist

          repo_types=("🌐 Public" "🔒 Private")
          repo_type=$( \
              printf "%s\n" "${repo_types[@]}" | \
              gum filter --limit 1 --placeholder 'Pick repo type...' --height 50
          )

          if [ "$repo_type" == "🔒 Private" ]; then
              gh repo create $github_user/$repo_dir --private --template $template
              sleep 2
          else
              gh repo create $github_user/$repo_dir --public --template $template
              sleep 2
          fi

          # Open the repository URL in the default web browser
          gh repo view $github_user/$repo_dir --web

          # Add gum select to choose between Normal Git Repo and Bare Git Repo
          repo_types=("Bare Git Repo" "Normal Git Repo")
          repo_type=$( \
              printf "%s\n" "${repo_types[@]}" | \
              gum filter --limit 1 --placeholder "Choose a repo type" --height 50
          )

          if [[ $repo_type == "Normal Git Repo" ]]; then
              gum spin --title "Cloning from GitHub into $github_user_dir/$repo_dir" -- \
                  git clone git@github.com:$github_user/$repo_dir.git $github_user_dir/$repo_dir
              printf "Done! 🎉"
              sleep 2
          else
              gum spin --title "Cloning from GitHub into $github_user_dir/$repo_dir" -- \
                  git-clone-bare-for-worktrees.sh git@github.com:$github_user/$repo_dir.git $github_user_dir/$repo_dir
              printf "Done! 🎉"
              sleep 2
          fi

          sesh connect $github_user_dir/$repo_dir
       fi
    fi
}

sesh_new_repo
