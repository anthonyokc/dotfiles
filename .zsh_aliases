# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

# Quickly reload .zshrc
alias zs='source ~/.zshrc'

# cd aliases
alias cu='cd ..'
alias cuu='cd ../..'

# ls aliases
alias l='lsd'
alias la='lsd -A'
alias lg='ls -la '
alias ll='lsd -alF'
alias lls='lsd -alF --total-size --sizesort'
alias llt='lsd -alF --total-size --sizesort'
alias lt='lsd --tree'
alias lta='lsd -A --tree'
alias ltd='lsd -da --tree'
alias ltdl='lsd -dalF --tree'
alias ltl='lsd -alF --tree'
alias ltls='lsd -alF --tree --total-size --sizesort'
alias ltlt='lsd -alF --tree --total-size --timesort'

# File tree with plain hyphens for markdown represenation
function treee() {
    tree --charset=ASCII | sed 's/|/ /g; s/`/-/g; s/+-/-/g; s/--/-/g; s/--/-/g'
}

# rm aliases
alias rm='rm -Iv' # interactive, verbose

# sed aliases
function splitspace() {
    echo "$1" | sed 's/ /\n/g'
}
function splitcomma() {
    echo "$1" | sed 's/,/\n/g'
}
function splitcolon() {
    echo "$1" | sed 's/:/\n/g'
}
function splitsemicolon() {
    echo "$1" | sed 's/;/\n/g'
}
function splitdash() {
    echo "$1" | sed 's/-/\n/g'
}

# update/upgrade
alias update='brew update && sudo apt update && apt list --upgradable'
alias upgrade='sudo apt upgrade && sudo apt autoremove && brew upgrade'

# Nix commands
alias ng='noglob'
alias n='ng nix'
alias nb='ng nix build'
alias nd='ng nix develop'
alias nf='ng nix flake'
alias np='ng nix profile'
function npa() {
    ng nix profile add nixpkgs#$1
}
alias npA='ng nix profile add'
alias npr='ng nix profile remove'
alias npl='ng nix profile list'
alias npu='ng nix profile upgrade'
alias ns='ng nix shell'
alias nr='ng nix run'
alias nS='ng nix search'
alias nU='sudo determinate-nixd upgrade'


# ssh server monitoring/connections
alias sl='sudo tail -f /var/log/auth.log'
alias sshs='sudo systemctl status ssh'
alias sshr='sudo systemctl restart ssh'

# networking
alias i='ip -br a'

# Vim
alias v='nvim'
alias vim='nvim'
alias vf='nvim -c "FZF"'
alias vz='nvim ~/.zshrc'

# tmux
alias t='tmux new-session -s "Home 🏠"'
alias ta='tmux attach'
alias tk='tmux kill-server'

# Python
alias python='python3' # From homebrew


# yazi
function y() {
    local tmp="$(mktemp -t "yazi-cwd.XXXXXX")"
    yazi "$@" --cwd-file="$tmp"
    if cwd="$(cat -- "$tmp")" && [ -n "$cwd" ] && [ "$cwd" != "$PWD" ]; then
        cd -- "$cwd"
    fi
    rm -f -- "$tmp"
}

# felvin-search/token-count: cli tool for counting tokens
alias tcf='token-count --model_name "gpt-4" --file'
alias tcd='token-count --model_name "gpt-4" --directory'
alias tct='token-count --model_name "gpt-4" --text'

# Working with Git
alias sa='ssh-add ~/.ssh/github_ed25519.pub'
alias ga='git add'
alias gc='git commit -m'
alias gca='git commit -am'
alias gs='git status'
alias gd='git diff'
alias gco='git checkout'
alias gb='git branch'
alias gl='git log --oneline'
alias gplf= 'git fetch --all; git reset --hard HEAD; git merge @{u}'
alias gpl='git pull'
alias gps='git push'
alias gch='git checkout'
alias gf='git fetch'
function gcl() {
    git clone git@github.com:$1.git
}

alias hb='hub browse'

alias bfg='java -jar $HOME/scripts/bfg-1.14.0.jar'

# Working with dotfiles
alias dotfiles='/usr/bin/git --git-dir=$HOME/dotfiles/ --work-tree=$HOME'
alias dotfiles-push='dotfiles push git@github.com:AnthonyOKC/dotfiles.git'
alias dotfiles-pull='dotfiles pull git@github.com:AnthonyOKC/dotfiles.git'
alias da='dotfiles add -u'
alias dr='dotfiles restore --staged'
alias dc='dotfiles commit -m'
alias ds='dotfiles status'
alias dd='dotfiles diff HEAD'
alias dp='dotfiles-push'
alias dl='dotfiles log --oneline'

# tmux bare git repo
alias tmux-repo='/usr/bin/git --git-dir=$HOME/tmux/ --work-tree=$HOME'

# xfce4
alias start-noshow='pgrep -x bspwm > /dev/null || (bspwm &> /dev/null &) && startxfce4 &> ~/log/xfce4.log'
alias start='pgrep -x bspwm > /dev/null || (bspwm &> /dev/null &) && startxfce4'

# bat
alias bat=batcat

# wc functions
# Count lines in files of a certain type in a directory
function linecount ()
{
    local current_dir="$(pwd)"
    local file_path="${1:-$current_dir}" # Default to current directory if no first argument is provided
    local pattern="${2:-*.R}" # Default to *.R if no second argument is provided
    local sort_column="number_of_lines file -n -r" # Default sort by number of lines

    for arg in "${@:3}"; do
        if [[ "$arg" == "--sort-files" ]]; then
            sort_column="file" # Sort by file name
        fi
    done

    nu_command="\$in | detect columns | sort-by $sort_column"

    find $file_path -name $pattern -print0 |
        xargs -0 wc -l |
        sed "s|$file_path||" |
        column -t -N "number_of_lines,file" |
        nu --stdin --commands "$nu_command"

}

# file functions
# Count MIME types in files of a certain type in a directory
function count_mimes() {
    local current_dir="$(pwd)"
    local file_path="${1:-$current_dir}" # Default to current directory if no first argument is provided
    local pattern="*.R" # Default to *.R if no second argument is provided
    local show_files=0 # Default to not showing files

    for arg in "${@:2}"; do
       if [[ "$arg" == "--show-files" ]]; then
           show_files=1
        else
           pattern="$arg"                     # anything else is the glob
        fi
    done

    if [ "$show_files" -eq 1 ]; then
      fields='1,2,3'
      column_names='count,file,mime_type,mime_encoding'
    else
      fields='2,3'
      column_names='count,mime_type,mime_encoding'
    fi

    find "$file_path" -name "$pattern" |
        xargs file --mime |
        sed 's|.*/main/||' |
        sed 's|: \+|\t|' |
        sed 's|; \+|\t|' |
        cut -f"$fields" |
        uniq -c |
        sort -r |
        column -t -N "$column_names" |
        nu --stdin --commands '$in | detect columns'
}
